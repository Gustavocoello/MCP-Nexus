"""Make user_id nullable

Revision ID: d7136f3c3d75
Revises: 2e24698e8672
Create Date: 2025-06-30 23:45:19.410011

"""
from typing import Sequence, Union

from alembic import op, context
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'd7136f3c3d75'
down_revision: Union[str, Sequence[str], None] = '2e24698e8672'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    from sqlalchemy import text

    # 🧠 Alter chat table
    with op.batch_alter_table('chat', schema=None) as batch_op:
        batch_op.alter_column('user_id',
            existing_type=mysql.VARCHAR(length=64),
            nullable=True)

    # 🧠 Alter message table
    with op.batch_alter_table('message', schema=None) as batch_op:
        batch_op.create_foreign_key(None, 'chat', ['chat_id'], ['id'])

    # 🧠 Alter user_memory
    with op.batch_alter_table('user_memory', schema=None) as batch_op:
        dialect = context.get_context().dialect.name

        if dialect == "mysql":
            try:
                batch_op.drop_constraint("user_memory_ibfk_1", type_="foreignkey")
            except Exception as e:
                print(f"MySQL: no se pudo eliminar user_memory_ibfk_1: {e}")

        elif dialect == "mssql":
            conn = op.get_bind()
            result = conn.execute(text("""
                SELECT name FROM sys.foreign_keys
                WHERE parent_object_id = OBJECT_ID('user_memory')
                AND name = 'fk_user_memory_chat'
            """))
            fk_exists = result.first()
            if fk_exists:
                try:
                    batch_op.drop_constraint("fk_user_memory_chat", type_="foreignkey")
                except Exception as e:
                    print(f"SQL Server: no se pudo eliminar fk_user_memory_chat: {e}")
            else:
                print("🔍 SQL Server: 'fk_user_memory_chat' no existe, no se intenta eliminar.")

        # ✅ Crear FK nueva en ambos
        batch_op.create_foreign_key(None, 'chat', ['chat_id'], ['id'])
def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_memory', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('fk_user_memory_chat'), 'chat', ['chat_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('message', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    with op.batch_alter_table('chat', schema=None) as batch_op:
        batch_op.alter_column('user_id',
               existing_type=mysql.VARCHAR(length=64),
               nullable=False)

    # ### end Alembic commands ###
